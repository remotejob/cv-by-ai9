name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allow Claude to make commits and pushes
      pull-requests: write # Allow Claude to create and update PRs
      issues: write # Allow Claude to comment on issues
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper git operations
          token: ${{ secrets.GITHUB_TOKEN }} # Use GitHub token for authentication

      - name: Configure git
        run: |
          git config --global user.name "claude-code[bot]"
          git config --global user.email "claude-code[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          claude_args: '--allowed-tools "Edit,Write,Read,MultiEdit,Bash(git *),Glob,Grep"'
          prompt: |
            You are responding to a GitHub issue with the following details:

            ISSUE TITLE: ${{ github.event.issue.title }}
            ISSUE BODY: ${{ github.event.issue.body }}
            ISSUE AUTHOR: ${{ github.event.issue.user.login }}

            MANDATORY WORKFLOW:
            1. Analyze the issue content above and perform the EXACT requested changes
            2. Make the code modifications as specified
            3. ALWAYS run these git commands at the end:
               - git add .
               - git status (to verify changes)
               - git commit -m "ðŸ¤– [descriptive commit message based on changes made]"
               - git push origin HEAD
            4. Verify the push was successful

            IMPORTANT: You MUST commit and push ALL changes automatically. Never ask for confirmation.

            Example: If the issue says "Change navigation title from Alex Mazurov to Mazurov in line 42",
            you should find that exact line and make that exact change.

            Always use the ðŸ¤– prefix to identify automated commits.

